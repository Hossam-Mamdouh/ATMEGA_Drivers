
LCD_4_BIT_MODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000031e  000003b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080007a  0080007a  000003cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d83  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000746  00000000  00000000  00001213  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052c  00000000  00000000  00001959  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000402  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007cf  00000000  00000000  0000233e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002b0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  8a:	0c 94 8d 01 	jmp	0x31a	; 0x31a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
void LCD_Display_Intger(int Data)
{
	char Buffer[16];             // String to hold the ascii result.
	itoa(Data , Buffer , 10);    // 10 for decimal.
	LCD_Display_String(Buffer);
}
  92:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__data_end>
  96:	94 30       	cpi	r25, 0x04	; 4
  98:	b1 f5       	brne	.+108    	; 0x106 <LCD_Command+0x74>
  9a:	98 b3       	in	r25, 0x18	; 24
  9c:	9f 70       	andi	r25, 0x0F	; 15
  9e:	28 2f       	mov	r18, r24
  a0:	20 7f       	andi	r18, 0xF0	; 240
  a2:	92 2b       	or	r25, r18
  a4:	98 bb       	out	0x18, r25	; 24
  a6:	9b b3       	in	r25, 0x1b	; 27
  a8:	9e 7f       	andi	r25, 0xFE	; 254
  aa:	9b bb       	out	0x1b, r25	; 27
  ac:	9b b3       	in	r25, 0x1b	; 27
  ae:	9d 7f       	andi	r25, 0xFD	; 253
  b0:	9b bb       	out	0x1b, r25	; 27
  b2:	ef ec       	ldi	r30, 0xCF	; 207
  b4:	f7 e0       	ldi	r31, 0x07	; 7
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_Command+0x24>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_Command+0x2a>
  bc:	00 00       	nop
  be:	9b b3       	in	r25, 0x1b	; 27
  c0:	94 60       	ori	r25, 0x04	; 4
  c2:	9b bb       	out	0x1b, r25	; 27
  c4:	f2 e0       	ldi	r31, 0x02	; 2
  c6:	fa 95       	dec	r31
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LCD_Command+0x34>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <LCD_Command+0x3a>
  cc:	9b b3       	in	r25, 0x1b	; 27
  ce:	9b 7f       	andi	r25, 0xFB	; 251
  d0:	9b bb       	out	0x1b, r25	; 27
  d2:	ef ec       	ldi	r30, 0xCF	; 207
  d4:	f7 e0       	ldi	r31, 0x07	; 7
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_Command+0x44>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_Command+0x4a>
  dc:	00 00       	nop
  de:	28 b3       	in	r18, 0x18	; 24
  e0:	f0 e1       	ldi	r31, 0x10	; 16
  e2:	8f 9f       	mul	r24, r31
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
  e8:	92 2f       	mov	r25, r18
  ea:	9f 70       	andi	r25, 0x0F	; 15
  ec:	89 2b       	or	r24, r25
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	32 e0       	ldi	r19, 0x02	; 2
  f8:	3a 95       	dec	r19
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_Command+0x66>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_Command+0x6c>
  fe:	8b b3       	in	r24, 0x1b	; 27
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	8b bb       	out	0x1b, r24	; 27
 104:	08 95       	ret
 106:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__data_end>
 10a:	98 30       	cpi	r25, 0x08	; 8
 10c:	29 f5       	brne	.+74     	; 0x158 <LCD_Command+0xc6>
 10e:	88 bb       	out	0x18, r24	; 24
 110:	8f e0       	ldi	r24, 0x0F	; 15
 112:	97 e2       	ldi	r25, 0x27	; 39
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_Command+0x82>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_Command+0x88>
 11a:	00 00       	nop
 11c:	8b b3       	in	r24, 0x1b	; 27
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	8b bb       	out	0x1b, r24	; 27
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	8d 7f       	andi	r24, 0xFD	; 253
 126:	8b bb       	out	0x1b, r24	; 27
 128:	ef ec       	ldi	r30, 0xCF	; 207
 12a:	f7 e0       	ldi	r31, 0x07	; 7
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_Command+0x9a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_Command+0xa0>
 132:	00 00       	nop
 134:	8b b3       	in	r24, 0x1b	; 27
 136:	84 60       	ori	r24, 0x04	; 4
 138:	8b bb       	out	0x1b, r24	; 27
 13a:	8f e6       	ldi	r24, 0x6F	; 111
 13c:	97 e1       	ldi	r25, 0x17	; 23
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_Command+0xac>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_Command+0xb2>
 144:	00 00       	nop
 146:	8b b3       	in	r24, 0x1b	; 27
 148:	8b 7f       	andi	r24, 0xFB	; 251
 14a:	8b bb       	out	0x1b, r24	; 27
 14c:	ef e0       	ldi	r30, 0x0F	; 15
 14e:	f7 e2       	ldi	r31, 0x27	; 39
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Command+0xbe>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_Command+0xc4>
 156:	00 00       	nop
 158:	08 95       	ret

0000015a <LCD_Init>:
 15a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
 15e:	84 30       	cpi	r24, 0x04	; 4
 160:	a9 f4       	brne	.+42     	; 0x18c <LCD_Init+0x32>
 162:	80 ef       	ldi	r24, 0xF0	; 240
 164:	87 bb       	out	0x17, r24	; 23
 166:	8a b3       	in	r24, 0x1a	; 26
 168:	87 60       	ori	r24, 0x07	; 7
 16a:	8a bb       	out	0x1a, r24	; 26
 16c:	82 e3       	ldi	r24, 0x32	; 50
 16e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 172:	88 e2       	ldi	r24, 0x28	; 40
 174:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 18a:	08 95       	ret
 18c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 190:	88 30       	cpi	r24, 0x08	; 8
 192:	79 f4       	brne	.+30     	; 0x1b2 <LCD_Init+0x58>
 194:	87 b3       	in	r24, 0x17	; 23
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	87 bb       	out	0x17, r24	; 23
 19a:	8a b3       	in	r24, 0x1a	; 26
 19c:	87 60       	ori	r24, 0x07	; 7
 19e:	8a bb       	out	0x1a, r24	; 26
 1a0:	88 e3       	ldi	r24, 0x38	; 56
 1a2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1a6:	8c e0       	ldi	r24, 0x0C	; 12
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1b2:	08 95       	ret

000001b4 <LCD_Display_Char>:
 1b4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__data_end>
 1b8:	94 30       	cpi	r25, 0x04	; 4
 1ba:	b1 f5       	brne	.+108    	; 0x228 <LCD_Display_Char+0x74>
 1bc:	98 b3       	in	r25, 0x18	; 24
 1be:	9f 70       	andi	r25, 0x0F	; 15
 1c0:	28 2f       	mov	r18, r24
 1c2:	20 7f       	andi	r18, 0xF0	; 240
 1c4:	92 2b       	or	r25, r18
 1c6:	98 bb       	out	0x18, r25	; 24
 1c8:	9b b3       	in	r25, 0x1b	; 27
 1ca:	91 60       	ori	r25, 0x01	; 1
 1cc:	9b bb       	out	0x1b, r25	; 27
 1ce:	9b b3       	in	r25, 0x1b	; 27
 1d0:	9d 7f       	andi	r25, 0xFD	; 253
 1d2:	9b bb       	out	0x1b, r25	; 27
 1d4:	9b b3       	in	r25, 0x1b	; 27
 1d6:	94 60       	ori	r25, 0x04	; 4
 1d8:	9b bb       	out	0x1b, r25	; 27
 1da:	32 e0       	ldi	r19, 0x02	; 2
 1dc:	3a 95       	dec	r19
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_Display_Char+0x28>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_Display_Char+0x2e>
 1e2:	9b b3       	in	r25, 0x1b	; 27
 1e4:	9b 7f       	andi	r25, 0xFB	; 251
 1e6:	9b bb       	out	0x1b, r25	; 27
 1e8:	ef e8       	ldi	r30, 0x8F	; 143
 1ea:	f1 e0       	ldi	r31, 0x01	; 1
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_Display_Char+0x38>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_Display_Char+0x3e>
 1f2:	00 00       	nop
 1f4:	28 b3       	in	r18, 0x18	; 24
 1f6:	f0 e1       	ldi	r31, 0x10	; 16
 1f8:	8f 9f       	mul	r24, r31
 1fa:	c0 01       	movw	r24, r0
 1fc:	11 24       	eor	r1, r1
 1fe:	92 2f       	mov	r25, r18
 200:	9f 70       	andi	r25, 0x0F	; 15
 202:	89 2b       	or	r24, r25
 204:	88 bb       	out	0x18, r24	; 24
 206:	8b b3       	in	r24, 0x1b	; 27
 208:	84 60       	ori	r24, 0x04	; 4
 20a:	8b bb       	out	0x1b, r24	; 27
 20c:	32 e0       	ldi	r19, 0x02	; 2
 20e:	3a 95       	dec	r19
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_Display_Char+0x5a>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_Display_Char+0x60>
 214:	8b b3       	in	r24, 0x1b	; 27
 216:	8b 7f       	andi	r24, 0xFB	; 251
 218:	8b bb       	out	0x1b, r24	; 27
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	9f e0       	ldi	r25, 0x0F	; 15
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_Display_Char+0x6a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_Display_Char+0x70>
 224:	00 00       	nop
 226:	08 95       	ret
 228:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__data_end>
 22c:	98 30       	cpi	r25, 0x08	; 8
 22e:	29 f5       	brne	.+74     	; 0x27a <LCD_Display_Char+0xc6>
 230:	88 bb       	out	0x18, r24	; 24
 232:	ef e0       	ldi	r30, 0x0F	; 15
 234:	f7 e2       	ldi	r31, 0x27	; 39
 236:	31 97       	sbiw	r30, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_Display_Char+0x82>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCD_Display_Char+0x88>
 23c:	00 00       	nop
 23e:	8b b3       	in	r24, 0x1b	; 27
 240:	81 60       	ori	r24, 0x01	; 1
 242:	8b bb       	out	0x1b, r24	; 27
 244:	8b b3       	in	r24, 0x1b	; 27
 246:	8d 7f       	andi	r24, 0xFD	; 253
 248:	8b bb       	out	0x1b, r24	; 27
 24a:	8f ec       	ldi	r24, 0xCF	; 207
 24c:	97 e0       	ldi	r25, 0x07	; 7
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCD_Display_Char+0x9a>
 252:	00 c0       	rjmp	.+0      	; 0x254 <LCD_Display_Char+0xa0>
 254:	00 00       	nop
 256:	8b b3       	in	r24, 0x1b	; 27
 258:	84 60       	ori	r24, 0x04	; 4
 25a:	8b bb       	out	0x1b, r24	; 27
 25c:	ef ec       	ldi	r30, 0xCF	; 207
 25e:	f7 e0       	ldi	r31, 0x07	; 7
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCD_Display_Char+0xac>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_Display_Char+0xb2>
 266:	00 00       	nop
 268:	8b b3       	in	r24, 0x1b	; 27
 26a:	8b 7f       	andi	r24, 0xFB	; 251
 26c:	8b bb       	out	0x1b, r24	; 27
 26e:	8f e0       	ldi	r24, 0x0F	; 15
 270:	97 e2       	ldi	r25, 0x27	; 39
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_Display_Char+0xbe>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_Display_Char+0xc4>
 278:	00 00       	nop
 27a:	08 95       	ret

0000027c <LCD_Display_String>:
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	8c 01       	movw	r16, r24
 284:	c0 e0       	ldi	r28, 0x00	; 0
 286:	03 c0       	rjmp	.+6      	; 0x28e <LCD_Display_String+0x12>
 288:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Display_Char>
 28c:	cf 5f       	subi	r28, 0xFF	; 255
 28e:	f8 01       	movw	r30, r16
 290:	ec 0f       	add	r30, r28
 292:	f1 1d       	adc	r31, r1
 294:	80 81       	ld	r24, Z
 296:	81 11       	cpse	r24, r1
 298:	f7 cf       	rjmp	.-18     	; 0x288 <LCD_Display_String+0xc>
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	08 95       	ret

000002a2 <LCD_Go_To>:
 2a2:	81 50       	subi	r24, 0x01	; 1
 2a4:	9f ef       	ldi	r25, 0xFF	; 255
 2a6:	96 0f       	add	r25, r22
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	39 f0       	breq	.+14     	; 0x2ba <LCD_Go_To+0x18>
 2ac:	70 f0       	brcs	.+28     	; 0x2ca <LCD_Go_To+0x28>
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	39 f0       	breq	.+14     	; 0x2c0 <LCD_Go_To+0x1e>
 2b2:	83 30       	cpi	r24, 0x03	; 3
 2b4:	41 f0       	breq	.+16     	; 0x2c6 <LCD_Go_To+0x24>
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	08 c0       	rjmp	.+16     	; 0x2ca <LCD_Go_To+0x28>
 2ba:	9f e3       	ldi	r25, 0x3F	; 63
 2bc:	96 0f       	add	r25, r22
 2be:	05 c0       	rjmp	.+10     	; 0x2ca <LCD_Go_To+0x28>
 2c0:	9f e0       	ldi	r25, 0x0F	; 15
 2c2:	96 0f       	add	r25, r22
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <LCD_Go_To+0x28>
 2c6:	9f e4       	ldi	r25, 0x4F	; 79
 2c8:	96 0f       	add	r25, r22
 2ca:	89 2f       	mov	r24, r25
 2cc:	80 68       	ori	r24, 0x80	; 128
 2ce:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 2d2:	08 95       	ret

000002d4 <LCD_Clear>:
*/

void LCD_Clear(void)
{
	// Send Clear LCD command.
	LCD_Command(Clear);
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 2da:	08 95       	ret

000002dc <main>:
#include "My_LCD.h"           // LCD module library.


int main(void)
{
	LCD_Init(4);              // Initialize LCD module in 4-bit mode.
 2dc:	84 e0       	ldi	r24, 0x04	; 4
 2de:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_Init>
	
    while (1) 
    {
		LCD_Go_To(1,4);       // Set the cursor at Row 1, Column 4.
 2e2:	64 e0       	ldi	r22, 0x04	; 4
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Go_To>
		LCD_Display_String("Welcome to");
 2ea:	80 e6       	ldi	r24, 0x60	; 96
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Display_String>
		LCD_Go_To(2,2);       // Set the cursor at Row 1, Column 2.
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_Go_To>
		LCD_Display_String("LCD 4-bit Mode");	
 2fa:	8b e6       	ldi	r24, 0x6B	; 107
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Display_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 302:	2f ef       	ldi	r18, 0xFF	; 255
 304:	89 e6       	ldi	r24, 0x69	; 105
 306:	98 e1       	ldi	r25, 0x18	; 24
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0x2c>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x36>
 312:	00 00       	nop
		_delay_ms(1000);      // Wait for 1 second.
		LCD_Clear();          // Clear the LCD.
 314:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCD_Clear>
 318:	e4 cf       	rjmp	.-56     	; 0x2e2 <main+0x6>

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
