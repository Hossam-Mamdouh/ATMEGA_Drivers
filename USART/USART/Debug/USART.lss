
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000508  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000057c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000057c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f64  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077e  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b8  00000000  00000000  00001d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  0000240c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a5  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b46  00000000  00000000  00002a65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000035ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
  74:	0c 94 82 02 	jmp	0x504	; 0x504 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <USART_Init>:
void LCD_Display_Intger(int Data)
{
	char Buffer[16];             // String to hold the ascii result.
	itoa(Data , Buffer , 10);    // 10 for decimal.
	LCD_Display_String(Buffer);
}
  7c:	cf 92       	push	r12
  7e:	ef 92       	push	r14
  80:	0f 93       	push	r16
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	d4 2f       	mov	r29, r20
  88:	c2 2f       	mov	r28, r18
  8a:	dc 01       	movw	r26, r24
  8c:	cb 01       	movw	r24, r22
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	aa 1f       	adc	r26, r26
  94:	bb 1f       	adc	r27, r27
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	aa 1f       	adc	r26, r26
  9c:	bb 1f       	adc	r27, r27
  9e:	9c 01       	movw	r18, r24
  a0:	ad 01       	movw	r20, r26
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	44 1f       	adc	r20, r20
  a8:	55 1f       	adc	r21, r21
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	44 1f       	adc	r20, r20
  b0:	55 1f       	adc	r21, r21
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	72 e1       	ldi	r23, 0x12	; 18
  b6:	8a e7       	ldi	r24, 0x7A	; 122
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__udivmodsi4>
  be:	ba 01       	movw	r22, r20
  c0:	a9 01       	movw	r20, r18
  c2:	41 50       	subi	r20, 0x01	; 1
  c4:	51 09       	sbc	r21, r1
  c6:	61 09       	sbc	r22, r1
  c8:	71 09       	sbc	r23, r1
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	c8 12       	cpse	r12, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <USART_Init+0x58>
  d0:	80 ec       	ldi	r24, 0xC0	; 192
  d2:	8a b9       	out	0x0a, r24	; 10
  d4:	8a b1       	in	r24, 0x0a	; 10
  d6:	88 61       	ori	r24, 0x18	; 24
  d8:	8a b9       	out	0x0a, r24	; 10
  da:	d1 30       	cpi	r29, 0x01	; 1
  dc:	11 f4       	brne	.+4      	; 0xe2 <USART_Init+0x66>
  de:	80 e4       	ldi	r24, 0x40	; 64
  e0:	80 bd       	out	0x20, r24	; 32
  e2:	01 30       	cpi	r16, 0x01	; 1
  e4:	11 f4       	brne	.+4      	; 0xea <USART_Init+0x6e>
  e6:	80 e3       	ldi	r24, 0x30	; 48
  e8:	80 bd       	out	0x20, r24	; 32
  ea:	02 30       	cpi	r16, 0x02	; 2
  ec:	11 f4       	brne	.+4      	; 0xf2 <USART_Init+0x76>
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	80 bd       	out	0x20, r24	; 32
  f2:	c6 30       	cpi	r28, 0x06	; 6
  f4:	11 f4       	brne	.+4      	; 0xfa <USART_Init+0x7e>
  f6:	82 e8       	ldi	r24, 0x82	; 130
  f8:	80 bd       	out	0x20, r24	; 32
  fa:	c7 30       	cpi	r28, 0x07	; 7
  fc:	11 f4       	brne	.+4      	; 0x102 <USART_Init+0x86>
  fe:	84 e8       	ldi	r24, 0x84	; 132
 100:	80 bd       	out	0x20, r24	; 32
 102:	c8 30       	cpi	r28, 0x08	; 8
 104:	11 f4       	brne	.+4      	; 0x10a <USART_Init+0x8e>
 106:	86 e8       	ldi	r24, 0x86	; 134
 108:	80 bd       	out	0x20, r24	; 32
 10a:	c9 30       	cpi	r28, 0x09	; 9
 10c:	21 f4       	brne	.+8      	; 0x116 <USART_Init+0x9a>
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	8a b9       	out	0x0a, r24	; 10
 112:	86 e8       	ldi	r24, 0x86	; 134
 114:	80 bd       	out	0x20, r24	; 32
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	e8 12       	cpse	r14, r24
 11a:	02 c0       	rjmp	.+4      	; 0x120 <USART_Init+0xa4>
 11c:	88 e0       	ldi	r24, 0x08	; 8
 11e:	80 bd       	out	0x20, r24	; 32
 120:	bb 27       	eor	r27, r27
 122:	a7 2f       	mov	r26, r23
 124:	96 2f       	mov	r25, r22
 126:	85 2f       	mov	r24, r21
 128:	80 bd       	out	0x20, r24	; 32
 12a:	49 b9       	out	0x09, r20	; 9
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	0f 91       	pop	r16
 132:	ef 90       	pop	r14
 134:	cf 90       	pop	r12
 136:	08 95       	ret

00000138 <USART_Transmit_Byte>:
 138:	5d 9b       	sbis	0x0b, 5	; 11
 13a:	fe cf       	rjmp	.-4      	; 0x138 <USART_Transmit_Byte>
 13c:	8c b9       	out	0x0c, r24	; 12
 13e:	08 95       	ret

00000140 <USART_Receive_Byte>:
 140:	5f 9b       	sbis	0x0b, 7	; 11
 142:	fe cf       	rjmp	.-4      	; 0x140 <USART_Receive_Byte>
 144:	8c b1       	in	r24, 0x0c	; 12
 146:	08 95       	ret

00000148 <USART_Transmit_String>:
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	8c 01       	movw	r16, r24
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	03 c0       	rjmp	.+6      	; 0x15a <USART_Transmit_String+0x12>
 154:	0e 94 9c 00 	call	0x138	; 0x138 <USART_Transmit_Byte>
 158:	cf 5f       	subi	r28, 0xFF	; 255
 15a:	f8 01       	movw	r30, r16
 15c:	ec 0f       	add	r30, r28
 15e:	f1 1d       	adc	r31, r1
 160:	80 81       	ld	r24, Z
 162:	81 11       	cpse	r24, r1
 164:	f7 cf       	rjmp	.-18     	; 0x154 <USART_Transmit_String+0xc>
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	08 95       	ret

0000016e <USART_Receive_String>:
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	8c 01       	movw	r16, r24
 17a:	0e 94 a0 00 	call	0x140	; 0x140 <USART_Receive_Byte>
 17e:	f8 01       	movw	r30, r16
 180:	80 83       	st	Z, r24
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	08 c0       	rjmp	.+16     	; 0x196 <USART_Receive_String+0x28>
 186:	cf 5f       	subi	r28, 0xFF	; 255
 188:	78 01       	movw	r14, r16
 18a:	ec 0e       	add	r14, r28
 18c:	f1 1c       	adc	r15, r1
 18e:	0e 94 a0 00 	call	0x140	; 0x140 <USART_Receive_Byte>
 192:	f7 01       	movw	r30, r14
 194:	80 83       	st	Z, r24
 196:	f8 01       	movw	r30, r16
 198:	ec 0f       	add	r30, r28
 19a:	f1 1d       	adc	r31, r1
 19c:	80 81       	ld	r24, Z
 19e:	8a 30       	cpi	r24, 0x0A	; 10
 1a0:	91 f7       	brne	.-28     	; 0x186 <USART_Receive_String+0x18>
 1a2:	10 82       	st	Z, r1
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	08 95       	ret

000001b0 <LCD_Command>:
 1b0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b4:	94 30       	cpi	r25, 0x04	; 4
 1b6:	b1 f5       	brne	.+108    	; 0x224 <LCD_Command+0x74>
 1b8:	98 b3       	in	r25, 0x18	; 24
 1ba:	9f 70       	andi	r25, 0x0F	; 15
 1bc:	28 2f       	mov	r18, r24
 1be:	20 7f       	andi	r18, 0xF0	; 240
 1c0:	92 2b       	or	r25, r18
 1c2:	98 bb       	out	0x18, r25	; 24
 1c4:	98 b3       	in	r25, 0x18	; 24
 1c6:	9e 7f       	andi	r25, 0xFE	; 254
 1c8:	98 bb       	out	0x18, r25	; 24
 1ca:	98 b3       	in	r25, 0x18	; 24
 1cc:	9d 7f       	andi	r25, 0xFD	; 253
 1ce:	98 bb       	out	0x18, r25	; 24
 1d0:	ef ec       	ldi	r30, 0xCF	; 207
 1d2:	f7 e0       	ldi	r31, 0x07	; 7
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_Command+0x24>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_Command+0x2a>
 1da:	00 00       	nop
 1dc:	98 b3       	in	r25, 0x18	; 24
 1de:	94 60       	ori	r25, 0x04	; 4
 1e0:	98 bb       	out	0x18, r25	; 24
 1e2:	f2 e0       	ldi	r31, 0x02	; 2
 1e4:	fa 95       	dec	r31
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD_Command+0x34>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_Command+0x3a>
 1ea:	98 b3       	in	r25, 0x18	; 24
 1ec:	9b 7f       	andi	r25, 0xFB	; 251
 1ee:	98 bb       	out	0x18, r25	; 24
 1f0:	ef ec       	ldi	r30, 0xCF	; 207
 1f2:	f7 e0       	ldi	r31, 0x07	; 7
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_Command+0x44>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_Command+0x4a>
 1fa:	00 00       	nop
 1fc:	28 b3       	in	r18, 0x18	; 24
 1fe:	f0 e1       	ldi	r31, 0x10	; 16
 200:	8f 9f       	mul	r24, r31
 202:	c0 01       	movw	r24, r0
 204:	11 24       	eor	r1, r1
 206:	92 2f       	mov	r25, r18
 208:	9f 70       	andi	r25, 0x0F	; 15
 20a:	89 2b       	or	r24, r25
 20c:	88 bb       	out	0x18, r24	; 24
 20e:	88 b3       	in	r24, 0x18	; 24
 210:	84 60       	ori	r24, 0x04	; 4
 212:	88 bb       	out	0x18, r24	; 24
 214:	32 e0       	ldi	r19, 0x02	; 2
 216:	3a 95       	dec	r19
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_Command+0x66>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_Command+0x6c>
 21c:	88 b3       	in	r24, 0x18	; 24
 21e:	8b 7f       	andi	r24, 0xFB	; 251
 220:	88 bb       	out	0x18, r24	; 24
 222:	08 95       	ret
 224:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 228:	98 30       	cpi	r25, 0x08	; 8
 22a:	29 f5       	brne	.+74     	; 0x276 <LCD_Command+0xc6>
 22c:	88 bb       	out	0x18, r24	; 24
 22e:	8f e0       	ldi	r24, 0x0F	; 15
 230:	97 e2       	ldi	r25, 0x27	; 39
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_Command+0x82>
 236:	00 c0       	rjmp	.+0      	; 0x238 <LCD_Command+0x88>
 238:	00 00       	nop
 23a:	88 b3       	in	r24, 0x18	; 24
 23c:	8e 7f       	andi	r24, 0xFE	; 254
 23e:	88 bb       	out	0x18, r24	; 24
 240:	88 b3       	in	r24, 0x18	; 24
 242:	8d 7f       	andi	r24, 0xFD	; 253
 244:	88 bb       	out	0x18, r24	; 24
 246:	ef ec       	ldi	r30, 0xCF	; 207
 248:	f7 e0       	ldi	r31, 0x07	; 7
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_Command+0x9a>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_Command+0xa0>
 250:	00 00       	nop
 252:	88 b3       	in	r24, 0x18	; 24
 254:	84 60       	ori	r24, 0x04	; 4
 256:	88 bb       	out	0x18, r24	; 24
 258:	8f e6       	ldi	r24, 0x6F	; 111
 25a:	97 e1       	ldi	r25, 0x17	; 23
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <LCD_Command+0xac>
 260:	00 c0       	rjmp	.+0      	; 0x262 <LCD_Command+0xb2>
 262:	00 00       	nop
 264:	88 b3       	in	r24, 0x18	; 24
 266:	8b 7f       	andi	r24, 0xFB	; 251
 268:	88 bb       	out	0x18, r24	; 24
 26a:	ef e0       	ldi	r30, 0x0F	; 15
 26c:	f7 e2       	ldi	r31, 0x27	; 39
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_Command+0xbe>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_Command+0xc4>
 274:	00 00       	nop
 276:	08 95       	ret

00000278 <LCD_Init>:
 278:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 27c:	84 30       	cpi	r24, 0x04	; 4
 27e:	a9 f4       	brne	.+42     	; 0x2aa <LCD_Init+0x32>
 280:	80 ef       	ldi	r24, 0xF0	; 240
 282:	87 bb       	out	0x17, r24	; 23
 284:	87 b3       	in	r24, 0x17	; 23
 286:	87 60       	ori	r24, 0x07	; 7
 288:	87 bb       	out	0x17, r24	; 23
 28a:	82 e3       	ldi	r24, 0x32	; 50
 28c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_Command>
 290:	88 e2       	ldi	r24, 0x28	; 40
 292:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_Command>
 296:	8c e0       	ldi	r24, 0x0C	; 12
 298:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_Command>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_Command>
 2a2:	80 e8       	ldi	r24, 0x80	; 128
 2a4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_Command>
 2a8:	08 95       	ret
 2aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ae:	88 30       	cpi	r24, 0x08	; 8
 2b0:	79 f4       	brne	.+30     	; 0x2d0 <LCD_Init+0x58>
 2b2:	87 b3       	in	r24, 0x17	; 23
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	87 bb       	out	0x17, r24	; 23
 2b8:	87 b3       	in	r24, 0x17	; 23
 2ba:	87 60       	ori	r24, 0x07	; 7
 2bc:	87 bb       	out	0x17, r24	; 23
 2be:	88 e3       	ldi	r24, 0x38	; 56
 2c0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_Command>
 2c4:	8c e0       	ldi	r24, 0x0C	; 12
 2c6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_Command>
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_Command>
 2d0:	08 95       	ret

000002d2 <LCD_Display_Char>:
 2d2:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2d6:	94 30       	cpi	r25, 0x04	; 4
 2d8:	b1 f5       	brne	.+108    	; 0x346 <LCD_Display_Char+0x74>
 2da:	98 b3       	in	r25, 0x18	; 24
 2dc:	9f 70       	andi	r25, 0x0F	; 15
 2de:	28 2f       	mov	r18, r24
 2e0:	20 7f       	andi	r18, 0xF0	; 240
 2e2:	92 2b       	or	r25, r18
 2e4:	98 bb       	out	0x18, r25	; 24
 2e6:	98 b3       	in	r25, 0x18	; 24
 2e8:	91 60       	ori	r25, 0x01	; 1
 2ea:	98 bb       	out	0x18, r25	; 24
 2ec:	98 b3       	in	r25, 0x18	; 24
 2ee:	9d 7f       	andi	r25, 0xFD	; 253
 2f0:	98 bb       	out	0x18, r25	; 24
 2f2:	98 b3       	in	r25, 0x18	; 24
 2f4:	94 60       	ori	r25, 0x04	; 4
 2f6:	98 bb       	out	0x18, r25	; 24
 2f8:	32 e0       	ldi	r19, 0x02	; 2
 2fa:	3a 95       	dec	r19
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_Display_Char+0x28>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_Display_Char+0x2e>
 300:	98 b3       	in	r25, 0x18	; 24
 302:	9b 7f       	andi	r25, 0xFB	; 251
 304:	98 bb       	out	0x18, r25	; 24
 306:	ef e8       	ldi	r30, 0x8F	; 143
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_Display_Char+0x38>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_Display_Char+0x3e>
 310:	00 00       	nop
 312:	28 b3       	in	r18, 0x18	; 24
 314:	f0 e1       	ldi	r31, 0x10	; 16
 316:	8f 9f       	mul	r24, r31
 318:	c0 01       	movw	r24, r0
 31a:	11 24       	eor	r1, r1
 31c:	92 2f       	mov	r25, r18
 31e:	9f 70       	andi	r25, 0x0F	; 15
 320:	89 2b       	or	r24, r25
 322:	88 bb       	out	0x18, r24	; 24
 324:	88 b3       	in	r24, 0x18	; 24
 326:	84 60       	ori	r24, 0x04	; 4
 328:	88 bb       	out	0x18, r24	; 24
 32a:	32 e0       	ldi	r19, 0x02	; 2
 32c:	3a 95       	dec	r19
 32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_Display_Char+0x5a>
 330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_Display_Char+0x60>
 332:	88 b3       	in	r24, 0x18	; 24
 334:	8b 7f       	andi	r24, 0xFB	; 251
 336:	88 bb       	out	0x18, r24	; 24
 338:	8f e9       	ldi	r24, 0x9F	; 159
 33a:	9f e0       	ldi	r25, 0x0F	; 15
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_Display_Char+0x6a>
 340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_Display_Char+0x70>
 342:	00 00       	nop
 344:	08 95       	ret
 346:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 34a:	98 30       	cpi	r25, 0x08	; 8
 34c:	29 f5       	brne	.+74     	; 0x398 <LCD_Display_Char+0xc6>
 34e:	88 bb       	out	0x18, r24	; 24
 350:	ef e0       	ldi	r30, 0x0F	; 15
 352:	f7 e2       	ldi	r31, 0x27	; 39
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <LCD_Display_Char+0x82>
 358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_Display_Char+0x88>
 35a:	00 00       	nop
 35c:	88 b3       	in	r24, 0x18	; 24
 35e:	81 60       	ori	r24, 0x01	; 1
 360:	88 bb       	out	0x18, r24	; 24
 362:	88 b3       	in	r24, 0x18	; 24
 364:	8d 7f       	andi	r24, 0xFD	; 253
 366:	88 bb       	out	0x18, r24	; 24
 368:	8f ec       	ldi	r24, 0xCF	; 207
 36a:	97 e0       	ldi	r25, 0x07	; 7
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <LCD_Display_Char+0x9a>
 370:	00 c0       	rjmp	.+0      	; 0x372 <LCD_Display_Char+0xa0>
 372:	00 00       	nop
 374:	88 b3       	in	r24, 0x18	; 24
 376:	84 60       	ori	r24, 0x04	; 4
 378:	88 bb       	out	0x18, r24	; 24
 37a:	ef ec       	ldi	r30, 0xCF	; 207
 37c:	f7 e0       	ldi	r31, 0x07	; 7
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD_Display_Char+0xac>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_Display_Char+0xb2>
 384:	00 00       	nop
 386:	88 b3       	in	r24, 0x18	; 24
 388:	8b 7f       	andi	r24, 0xFB	; 251
 38a:	88 bb       	out	0x18, r24	; 24
 38c:	8f e0       	ldi	r24, 0x0F	; 15
 38e:	97 e2       	ldi	r25, 0x27	; 39
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_Display_Char+0xbe>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_Display_Char+0xc4>
 396:	00 00       	nop
 398:	08 95       	ret

0000039a <LCD_Display_String>:
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	8c 01       	movw	r16, r24
 3a2:	c0 e0       	ldi	r28, 0x00	; 0
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <LCD_Display_String+0x12>
 3a6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LCD_Display_Char>
 3aa:	cf 5f       	subi	r28, 0xFF	; 255
 3ac:	f8 01       	movw	r30, r16
 3ae:	ec 0f       	add	r30, r28
 3b0:	f1 1d       	adc	r31, r1
 3b2:	80 81       	ld	r24, Z
 3b4:	81 11       	cpse	r24, r1
 3b6:	f7 cf       	rjmp	.-18     	; 0x3a6 <LCD_Display_String+0xc>
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	08 95       	ret

000003c0 <LCD_Go_To>:
 3c0:	81 50       	subi	r24, 0x01	; 1
 3c2:	9f ef       	ldi	r25, 0xFF	; 255
 3c4:	96 0f       	add	r25, r22
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	39 f0       	breq	.+14     	; 0x3d8 <LCD_Go_To+0x18>
 3ca:	70 f0       	brcs	.+28     	; 0x3e8 <LCD_Go_To+0x28>
 3cc:	82 30       	cpi	r24, 0x02	; 2
 3ce:	39 f0       	breq	.+14     	; 0x3de <LCD_Go_To+0x1e>
 3d0:	83 30       	cpi	r24, 0x03	; 3
 3d2:	41 f0       	breq	.+16     	; 0x3e4 <LCD_Go_To+0x24>
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	08 c0       	rjmp	.+16     	; 0x3e8 <LCD_Go_To+0x28>
 3d8:	9f e3       	ldi	r25, 0x3F	; 63
 3da:	96 0f       	add	r25, r22
 3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <LCD_Go_To+0x28>
 3de:	9f e0       	ldi	r25, 0x0F	; 15
 3e0:	96 0f       	add	r25, r22
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <LCD_Go_To+0x28>
 3e4:	9f e4       	ldi	r25, 0x4F	; 79
 3e6:	96 0f       	add	r25, r22
 3e8:	89 2f       	mov	r24, r25
 3ea:	80 68       	ori	r24, 0x80	; 128
 3ec:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_Command>
 3f0:	08 95       	ret

000003f2 <LCD_Clear>:
*/

void LCD_Clear(void)
{
	// Send Clear LCD command.
	LCD_Command(Clear);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_Command>
 3f8:	08 95       	ret

000003fa <main>:
#include "My_USART.h"         // USART module library.
#include "My_LCD.h"           // LCD module library.

int main(void)
{
    sei();                    // Enable Global interrupts.
 3fa:	78 94       	sei
	LCD_Init(4);              // Initialize LCD module in 4-bit mode.
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_Init>
	/* 
     * Initialize USART module with the following configurations:-
	 * Baud Rate = 9600, 0: Asynchronous mode, 8: 8-bit DataSize.
	 * 0: No Parity, 1: 1 Stop bit, 1: Enable Interrupts.
	 */
	USART_Init(9600, 0, 8, 0, 1, 1);
 402:	cc 24       	eor	r12, r12
 404:	c3 94       	inc	r12
 406:	ee 24       	eor	r14, r14
 408:	e3 94       	inc	r14
 40a:	00 e0       	ldi	r16, 0x00	; 0
 40c:	28 e0       	ldi	r18, 0x08	; 8
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	60 e8       	ldi	r22, 0x80	; 128
 412:	75 e2       	ldi	r23, 0x25	; 37
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 3e 00 	call	0x7c	; 0x7c <USART_Init>
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>

0000041e <__vector_13>:
    }
}

// Interrupt Service Routine for USART Receive Complete Interrupt RXC.
ISR(USART_RXC_vect)
{
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	2f 93       	push	r18
 42a:	3f 93       	push	r19
 42c:	4f 93       	push	r20
 42e:	5f 93       	push	r21
 430:	6f 93       	push	r22
 432:	7f 93       	push	r23
 434:	8f 93       	push	r24
 436:	9f 93       	push	r25
 438:	af 93       	push	r26
 43a:	bf 93       	push	r27
 43c:	ef 93       	push	r30
 43e:	ff 93       	push	r31
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
 448:	c4 56       	subi	r28, 0x64	; 100
 44a:	d1 09       	sbc	r29, r1
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	cd bf       	out	0x3d, r28	; 61
	uint8_t Data[100];
	// Read data from the USART module.
	USART_Receive_String(Data);
 450:	ce 01       	movw	r24, r28
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	0e 94 b7 00 	call	0x16e	; 0x16e <USART_Receive_String>
	
    // Echo the data from the USART module.
	USART_Transmit_Byte(0x0A);   // Print new line.
 458:	8a e0       	ldi	r24, 0x0A	; 10
 45a:	0e 94 9c 00 	call	0x138	; 0x138 <USART_Transmit_Byte>
	USART_Transmit_String(Data); // Print the Data.
 45e:	ce 01       	movw	r24, r28
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Transmit_String>
	
	// Display the data from the USART module on the LCD.
	LCD_Go_To(1,5);       // Set the cursor at Row 1, Column 2.
 466:	65 e0       	ldi	r22, 0x05	; 5
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_Go_To>
    LCD_Display_String((char *)Data);	
 46e:	ce 01       	movw	r24, r28
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	0e 94 cd 01 	call	0x39a	; 0x39a <LCD_Display_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 476:	2f ef       	ldi	r18, 0xFF	; 255
 478:	89 e6       	ldi	r24, 0x69	; 105
 47a:	98 e1       	ldi	r25, 0x18	; 24
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	80 40       	sbci	r24, 0x00	; 0
 480:	90 40       	sbci	r25, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <__vector_13+0x5e>
 484:	00 c0       	rjmp	.+0      	; 0x486 <__vector_13+0x68>
 486:	00 00       	nop
	_delay_ms(1000);      // Wait for 1 second.
	LCD_Clear();          // Clear the LCD.
 488:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_Clear>
}
 48c:	cc 59       	subi	r28, 0x9C	; 156
 48e:	df 4f       	sbci	r29, 0xFF	; 255
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	ff 91       	pop	r31
 4a0:	ef 91       	pop	r30
 4a2:	bf 91       	pop	r27
 4a4:	af 91       	pop	r26
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	7f 91       	pop	r23
 4ac:	6f 91       	pop	r22
 4ae:	5f 91       	pop	r21
 4b0:	4f 91       	pop	r20
 4b2:	3f 91       	pop	r19
 4b4:	2f 91       	pop	r18
 4b6:	0f 90       	pop	r0
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	0f 90       	pop	r0
 4bc:	1f 90       	pop	r1
 4be:	18 95       	reti

000004c0 <__udivmodsi4>:
 4c0:	a1 e2       	ldi	r26, 0x21	; 33
 4c2:	1a 2e       	mov	r1, r26
 4c4:	aa 1b       	sub	r26, r26
 4c6:	bb 1b       	sub	r27, r27
 4c8:	fd 01       	movw	r30, r26
 4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <__udivmodsi4_ep>

000004cc <__udivmodsi4_loop>:
 4cc:	aa 1f       	adc	r26, r26
 4ce:	bb 1f       	adc	r27, r27
 4d0:	ee 1f       	adc	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	a2 17       	cp	r26, r18
 4d6:	b3 07       	cpc	r27, r19
 4d8:	e4 07       	cpc	r30, r20
 4da:	f5 07       	cpc	r31, r21
 4dc:	20 f0       	brcs	.+8      	; 0x4e6 <__udivmodsi4_ep>
 4de:	a2 1b       	sub	r26, r18
 4e0:	b3 0b       	sbc	r27, r19
 4e2:	e4 0b       	sbc	r30, r20
 4e4:	f5 0b       	sbc	r31, r21

000004e6 <__udivmodsi4_ep>:
 4e6:	66 1f       	adc	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	88 1f       	adc	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	1a 94       	dec	r1
 4f0:	69 f7       	brne	.-38     	; 0x4cc <__udivmodsi4_loop>
 4f2:	60 95       	com	r22
 4f4:	70 95       	com	r23
 4f6:	80 95       	com	r24
 4f8:	90 95       	com	r25
 4fa:	9b 01       	movw	r18, r22
 4fc:	ac 01       	movw	r20, r24
 4fe:	bd 01       	movw	r22, r26
 500:	cf 01       	movw	r24, r30
 502:	08 95       	ret

00000504 <_exit>:
 504:	f8 94       	cli

00000506 <__stop_program>:
 506:	ff cf       	rjmp	.-2      	; 0x506 <__stop_program>
